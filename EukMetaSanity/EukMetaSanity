#!/usr/bin/env python
"""
EukMetaSanity
===============================================
EukMetaSanity - Generate structural/functional annotations for Eukaryotes

"""
import os
import logging
import sys
from pathlib import Path
# pylint: disable=no-member
from art import tprint
from plumbum import colors
from EukMetaSanity.utils.arg_parse import ArgParse
from EukMetaSanity.tasks.base.path_manager import PathManager
from EukMetaSanity.tasks.base.task_manager import TaskManager
from EukMetaSanity.tasks.base.input_manager import InputManager
from EukMetaSanity.tasks.base.config_manager import ConfigManager
from EukMetaSanity.tasks.pipeline_manager import PipelineManager


def _initialize_logging(ap: ArgParse):
    """ Logging initialize

    :param ap: ArgParse object
    """
    # Initialize logging
    log_file = os.path.join(ap.args.output, "%s-eukmetasanity.log" % ap.args.command)
    if os.path.exists(log_file):
        os.remove(log_file)
    logging.basicConfig(format='%(asctime)s - %(message)s', level=logging.INFO, filename=log_file, filemode='w')
    for _line in ("*" * 80, "",
                  "Primary log statements are redirected to %s" % log_file,
                  "Task-level log statements are redirected to subdirectory log files", "",
                  "*" * 80, "",
                  "Displaying step summaries here:\n"):
        print(colors.yellow & colors.bold | _line)


# Parse user arguments
def _parse_args(ap: ArgParse, tm: PipelineManager) -> ConfigManager:
    """ Parse file paths. Ensure pipeline requested by user is a valid pipeline

    :param ap: ArgParse object
    :param tm: PipelineManager object
    :return: Successfully loaded ConfigManager object
    """
    # Confirm path existence
    ap.args.config_file = str(Path(ap.args.config_file).resolve())
    if not os.path.exists(ap.args.config_file):
        raise FileNotFoundError(ap.args.config_file)
    # Ensure command is valid
    if ap.args.command not in tm.programs.keys():
        raise KeyError("'%s' pipeline is not implemented!" % ap.args.command)
    # Determine file extensions to keep
    ap.args.extensions = ap.args.extensions.split("/")
    return ConfigManager(ap.args.config_file)


if __name__ == "__main__":
    DEFAULT_EXTS = ".fna/.fasta/.fa"
    _tm = PipelineManager()
    _ap = ArgParse(
        (
            (("command",),
             {"help": "Select from %s" % "/".join(list(_tm.programs.keys()))}),
            (("-f", "--fasta_directory",),
             {"help": "Directory of FASTA files to annotate"}),
            (("-c", "--config_file"),
             {"help": "Config file", "required": True}),
            (("-x", "--extensions"),
             {"help": "Gather files matching list of extensions separated by '/', default %s" % DEFAULT_EXTS,
              "default": DEFAULT_EXTS}),
            (("-o", "--output"),
             {"help": "Output directory, default out", "default": "out"}),
            (("-s", "--skip_summary"),
             {"help": "Skip internal summary check and launch pipeline, default False", "default": False,
              "action": "store_true"})
        ),
        description="Run EukMetaSanity pipeline"
    )
    _cfg: ConfigManager = _parse_args(_ap, _tm)
    # Generate primary path manager
    _pm = PathManager(_ap.args.output)
    # Gather list of files to analyze
    _im = InputManager(_ap.args.output, _ap.args.fasta_directory, _pm, _cfg, _ap.args.extensions)
    # Run main program logic
    tprint("EukMetaSanity", font="smslant")

    if not _ap.args.skip_summary:
        print(colors.yellow & colors.bold | "Gathering files...")
        print(colors.yellow & colors.bold | "------------------")
        # Gather input files and display for user
        print(colors.yellow & colors.bold | _im.summarize_input())
        # Confirm valid
        if input("\nDoes this look correct? [Y/n] ").upper() != "Y":
            print(colors.warn & colors.bold | "Exiting...")
            sys.exit()
        # Generate TaskManager and run task-completion check
        print(colors.yellow & colors.bold | "\nChecking for completed dependencies...")
        task_manager = TaskManager(_tm, _cfg, _pm, _im.input_files, _im.input_prefixes, True, _ap.args.command)
        print(colors.yellow & colors.bold | "--------------------------------------")
        # Confirm valid
        print("\n" + task_manager.prerun_summarize())
        if input("\nDoes this look correct? [Y/n] ").upper() != "Y":
            print(colors.warn & colors.bold | "Exiting...")
            sys.exit()
    else:
        task_manager = TaskManager(_tm, _cfg, _pm, _im.input_files, _im.input_prefixes, True, _ap.args.command)

    # Begin logging
    _initialize_logging(_ap)
    # # Begin task list
    task_manager.run(_ap.args.output)
    # Display final output line
    print(colors.yellow & colors.bold | "\nEukMetaSanity %s pipeline complete!" % _ap.args.command)
